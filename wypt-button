#!/usr/bin/bash
set -o nounset
set -o errtrace
set -o pipefail
function CATCH_ERROR { # {{{
    local __LEC=$? __i __j
    echo "Traceback (most recent call last):" >&2
    for ((__i = ${#FUNCNAME[@]} - 1; __i >= 0; --__i)); do
        printf '  File %q line %s in %q\n' >&2 \
            "${BASH_SOURCE[__i]}" \
            "${BASH_LINENO[__i]}" \
            "${FUNCNAME[__i]}"
        if ((BASH_LINENO[__i])) && [ -f "${BASH_SOURCE[__i]}" ]; then
            for ((__j = 0; __j < BASH_LINENO[__i]; ++__j)); do
                read -r REPLY
            done < "${BASH_SOURCE[__i]}"
            printf '    %s\n' "$REPLY" >&2
        fi
    done
    echo "Error: [ExitCode: ${__LEC}]" >&2
    exit "${__LEC}"
}
trap CATCH_ERROR ERR # }}}

function import {
    local name stat
    for name in "${@}"; do
        hash -- "${name}" || stat=$?
        if test "${stat-0}" -ne 0; then
            echo "Import executable ${name@Q} failed, install it." >&2
            exit "${stat-1}"
        fi
    done
}

function help_msg {
    printf 'Usage: %q [Options]\n\n' "${proc_name}"
    cat <<- EOF
	Will you press the button
	       but on CLI

	Options:
	    -r      Random select pages
	    -n      No running translate
	    -h      show this help
	version: 0.${version?}
	EOF
}

import xmllint cat stty rm wget mktemp

readonly version=1
readonly minpage=100 maxpage=500000
readonly base_url=https://willyoupressthebutton.com
readonly xpath='//div[@id="dilemma"]/div[@class="rect"]/text()'
readonly yes_xpath='//div[@class="statsBarInfoText"]/span/text()'
readonly nextpage_xpath='//a[@class="showNextDilemma is-clickable"]/@href'
readonly proc_name=${0##*/}

EXIT_TRAPS=('stty echo')
trap 'for cmd in "${EXIT_TRAPS[@]}"; do eval -- "$cmd"; done' exit

tmp=$(mktemp -d --tmpdir "$proc_name".XXXXXXXXXX)
readonly tmp
EXIT_TRAPS+=('\rm -r -- "$tmp"')

readonly p1="$tmp/p1"
mkfifo "$p1"
exec 3<>"$p1"

declare -i is_random=0 use_translate=1

OPTIND=1

while getopts rnh opt || [ $OPTIND -le $# ]
do case "$opt" in
    r) is_random=1;;
    n) use_translate=0;;
    h) help_msg; exit;;
    \?)
        args=("${@:OPTIND}")
        echo "Error: invalid args (${args[*]@Q})" >&2
        help_msg
        exit 2
        ;;
esac done

if ((use_translate)); then
    import baidu_fanyi
fi

function show {
    printf "\e[1;92m%s\e[39m${2:+\n\t}%s\n\e[91m%s\e[0m\n" "${1}" "${2}" "${3}"
}
function takes {
    local lines
    mapfile -t lines <<< "${@:$#}"
    for ((i = 1; i < $#; ++i)); do
        printf -v "${@:i:1}" %s "${lines[i-1]}"
    done
}
function dump {
    local item
    printf %s "${1}"
    for item in "${@:2}"; do
        printf '\t\t%s' "${item}"
    done
    echo
}

while true; do
    if [ "$is_random" -ne 0 ] || [ -z "${page_id-}" ]; then
        page_id=$((SRANDOM % (maxpage-minpage) + minpage))
    fi
    page_url=${base_url}/$page_id
    html=$(wget -q -O - "${page_url}")
    yes_url=$page_url/stats/yes

    output=$(xmllint --html --xpath "${xpath}" - 2>/dev/null <<< "${html}")
    takes cond res "${output}"

    echo "page-id: $page_id"
    show "${cond?}" but "${res?}"

    if [ "$use_translate" -ne 0 ]; then
        output=$(printf '%s\n' "${output}" | baidu_fanyi -m '%s%n' -)
        takes tcond tres "${output}"
        echo ---
        show "${tcond?}" 但是 "${tres?}"
    fi

    {
        LEC=0
        wget -q -O "${p1}" "${yes_url}" || LEC=$?
        printf '\0' > "${p1}"
        exit $LEC
    } &

    echo '你选择 [y/n/q]:'
    while read -rsN1 -p'> '; do case "${REPLY}" in
        q|$'\004')  echo exit;          finish=1; break;;
        y|$'\n')    echo 你按下了按钮;  select=1; break;;
        n)          echo 你没有按按钮;  select=0; break;;
        *)          echo "Invalid input ${REPLY@Q}";;
    esac done

    read -rd '' yes_page < "${p1}"; wait $!
    if [ "${finish-0}" -eq 1 ]; then exit; fi
    output=$(xmllint --html --xpath "${yes_xpath}" - 2>/dev/null <<< "${yes_page}")
    takes yes no "${output}"
    echo ---
    show "${yes?}" "" "${no?}"

    dump >> ~/.wypt_history \
        "${page_id}" "${cond}" "${res}" "${tcond--}" "${tres--}" \
        "${select}" "${yes}" "${no}"

    if [ "$is_random" -eq 0 ]; then
        page_id=$(xmllint --html --xpath "${nextpage_xpath}" - 2>/dev/null <<< "${yes_page}")
        page_id=${page_id##*/}; page_id=${page_id%\"*}
    fi

    # report
    if [ "${select}" -ne 0 ]; then
        wget -q -O /dev/null "$page_url"/yes &
    else
        wget -q -O /dev/null "$page_url"/no &
    fi
    disown
done
