#!/usr/bin/bash
set -o nounset
set -o errtrace
set -o pipefail
function CATCH_ERROR { # {{{
    local __LEC=$? __i __j
    echo "Traceback (most recent call last):" >&2
    for ((__i = ${#FUNCNAME[@]} - 1; __i >= 0; --__i)); do
        printf '  File %q line %s in %q\n' >&2 \
            "${BASH_SOURCE[__i]}" \
            "${BASH_LINENO[__i]}" \
            "${FUNCNAME[__i]}"
        if ((BASH_LINENO[__i])) && [ -f "${BASH_SOURCE[__i]}" ]; then
            for ((__j = 0; __j < BASH_LINENO[__i]; ++__j)); do
                read -r REPLY
            done < "${BASH_SOURCE[__i]}"
            printf '    %s\n' "$REPLY" >&2
        fi
    done
    echo "Error: [ExitCode: ${__LEC}]" >&2
    exit "${__LEC}"
}
trap CATCH_ERROR ERR # }}}

test $# = 1

case "${1}" in
    -h|--help)
        printf 'Usage: %q <commit>\n' "${0##*/}"
        exit 0
        ;;
esac

git_root=$(git rev-parse --show-toplevel)
full_id=$(git show --no-patch "$1" | awk '/^commit/{print$2}')

echo "${git_root@A}"
echo "${full_id@A}"

test -n "$full_id"

echo "$full_id" >> "$git_root/.git/shallow"
